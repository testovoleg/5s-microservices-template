// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: core_svc.proto

package coreService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoreService_InvoiceHandlersList_FullMethodName = "/coreService.coreService/InvoiceHandlersList"
	CoreService_UpdateProduct_FullMethodName       = "/coreService.coreService/UpdateProduct"
	CoreService_GetProductById_FullMethodName      = "/coreService.coreService/GetProductById"
	CoreService_SearchProduct_FullMethodName       = "/coreService.coreService/SearchProduct"
	CoreService_DeleteProductByID_FullMethodName   = "/coreService.coreService/DeleteProductByID"
)

// CoreServiceClient is the client API for CoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreServiceClient interface {
	InvoiceHandlersList(ctx context.Context, in *InvoiceHandlersListReq, opts ...grpc.CallOption) (*InvoiceHandlersListRes, error)
	UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductRes, error)
	GetProductById(ctx context.Context, in *GetProductByIdReq, opts ...grpc.CallOption) (*GetProductByIdRes, error)
	SearchProduct(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchRes, error)
	DeleteProductByID(ctx context.Context, in *DeleteProductByIdReq, opts ...grpc.CallOption) (*DeleteProductByIdRes, error)
}

type coreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreServiceClient(cc grpc.ClientConnInterface) CoreServiceClient {
	return &coreServiceClient{cc}
}

func (c *coreServiceClient) InvoiceHandlersList(ctx context.Context, in *InvoiceHandlersListReq, opts ...grpc.CallOption) (*InvoiceHandlersListRes, error) {
	out := new(InvoiceHandlersListRes)
	err := c.cc.Invoke(ctx, CoreService_InvoiceHandlersList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductRes, error) {
	out := new(UpdateProductRes)
	err := c.cc.Invoke(ctx, CoreService_UpdateProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) GetProductById(ctx context.Context, in *GetProductByIdReq, opts ...grpc.CallOption) (*GetProductByIdRes, error) {
	out := new(GetProductByIdRes)
	err := c.cc.Invoke(ctx, CoreService_GetProductById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) SearchProduct(ctx context.Context, in *SearchReq, opts ...grpc.CallOption) (*SearchRes, error) {
	out := new(SearchRes)
	err := c.cc.Invoke(ctx, CoreService_SearchProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreServiceClient) DeleteProductByID(ctx context.Context, in *DeleteProductByIdReq, opts ...grpc.CallOption) (*DeleteProductByIdRes, error) {
	out := new(DeleteProductByIdRes)
	err := c.cc.Invoke(ctx, CoreService_DeleteProductByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServiceServer is the server API for CoreService service.
// All implementations should embed UnimplementedCoreServiceServer
// for forward compatibility
type CoreServiceServer interface {
	InvoiceHandlersList(context.Context, *InvoiceHandlersListReq) (*InvoiceHandlersListRes, error)
	UpdateProduct(context.Context, *UpdateProductReq) (*UpdateProductRes, error)
	GetProductById(context.Context, *GetProductByIdReq) (*GetProductByIdRes, error)
	SearchProduct(context.Context, *SearchReq) (*SearchRes, error)
	DeleteProductByID(context.Context, *DeleteProductByIdReq) (*DeleteProductByIdRes, error)
}

// UnimplementedCoreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCoreServiceServer struct {
}

func (UnimplementedCoreServiceServer) InvoiceHandlersList(context.Context, *InvoiceHandlersListReq) (*InvoiceHandlersListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvoiceHandlersList not implemented")
}
func (UnimplementedCoreServiceServer) UpdateProduct(context.Context, *UpdateProductReq) (*UpdateProductRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProduct not implemented")
}
func (UnimplementedCoreServiceServer) GetProductById(context.Context, *GetProductByIdReq) (*GetProductByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedCoreServiceServer) SearchProduct(context.Context, *SearchReq) (*SearchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProduct not implemented")
}
func (UnimplementedCoreServiceServer) DeleteProductByID(context.Context, *DeleteProductByIdReq) (*DeleteProductByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductByID not implemented")
}

// UnsafeCoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServiceServer will
// result in compilation errors.
type UnsafeCoreServiceServer interface {
	mustEmbedUnimplementedCoreServiceServer()
}

func RegisterCoreServiceServer(s grpc.ServiceRegistrar, srv CoreServiceServer) {
	s.RegisterService(&CoreService_ServiceDesc, srv)
}

func _CoreService_InvoiceHandlersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceHandlersListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).InvoiceHandlersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_InvoiceHandlersList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).InvoiceHandlersList(ctx, req.(*InvoiceHandlersListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_UpdateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).UpdateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_UpdateProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).UpdateProduct(ctx, req.(*UpdateProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_GetProductById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).GetProductById(ctx, req.(*GetProductByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_SearchProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).SearchProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_SearchProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).SearchProduct(ctx, req.(*SearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreService_DeleteProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServiceServer).DeleteProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoreService_DeleteProductByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServiceServer).DeleteProductByID(ctx, req.(*DeleteProductByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreService_ServiceDesc is the grpc.ServiceDesc for CoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coreService.coreService",
	HandlerType: (*CoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvoiceHandlersList",
			Handler:    _CoreService_InvoiceHandlersList_Handler,
		},
		{
			MethodName: "UpdateProduct",
			Handler:    _CoreService_UpdateProduct_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _CoreService_GetProductById_Handler,
		},
		{
			MethodName: "SearchProduct",
			Handler:    _CoreService_SearchProduct_Handler,
		},
		{
			MethodName: "DeleteProductByID",
			Handler:    _CoreService_DeleteProductByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "core_svc.proto",
}
