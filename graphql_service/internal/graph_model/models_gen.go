// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Bug struct {
	ID                string    `json:"id"`
	Name              *string   `json:"name,omitempty"`
	Description       *string   `json:"description,omitempty"`
	CreatedAt         *string   `json:"createdAt,omitempty"`
	UpdatedAt         *string   `json:"updatedAt,omitempty"`
	State             *BugState `json:"state,omitempty"`
	CreatedForRelease *Release  `json:"createdForRelease,omitempty"`
	SolvedInRelease   *Release  `json:"solvedInRelease,omitempty"`
	ExternalID        *string   `json:"externalID,omitempty"`
	Files             []*File   `json:"files,omitempty"`
}

type BugResponse struct {
	Code    int    `json:"code"`
	Success bool   `json:"success"`
	Message string `json:"message"`
	Bug     *Bug   `json:"bug,omitempty"`
}

type BugsResponse struct {
	TotalCount *int   `json:"totalCount,omitempty"`
	TotalPages *int   `json:"totalPages,omitempty"`
	Page       *int   `json:"page,omitempty"`
	Size       *int   `json:"size,omitempty"`
	HasMore    *bool  `json:"hasMore,omitempty"`
	Bugs       []*Bug `json:"bugs,omitempty"`
}

type Comment struct {
	Comment *string `json:"comment,omitempty"`
	Date    *string `json:"date,omitempty"`
	User    *User   `json:"user,omitempty"`
	Files   []*File `json:"files,omitempty"`
}

type File struct {
	FileID      *string `json:"file_id,omitempty"`
	FullFileID  *string `json:"full_file_id,omitempty"`
	PreviewData *string `json:"preview_data,omitempty"`
}

type Mutation struct {
}

type NewBug struct {
	Name               string  `json:"name"`
	Description        *string `json:"description,omitempty"`
	CreateForReleaseID string  `json:"createForReleaseID"`
	// files ID
	Files []string `json:"files,omitempty"`
}

type Product struct {
	ID          string  `json:"id"`
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type Query struct {
}

type Release struct {
	ID        string   `json:"id"`
	Name      *string  `json:"name,omitempty"`
	Product   *Product `json:"product,omitempty"`
	CreatedAt *string  `json:"createdAt,omitempty"`
}

type TipicalResponse struct {
	Code    int    `json:"code"`
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type User struct {
	ID    *string `json:"id,omitempty"`
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
}

type BugState string

const (
	BugStateNew      BugState = "NEW"
	BugStateInwork   BugState = "INWORK"
	BugStateDone     BugState = "DONE"
	BugStateRejected BugState = "REJECTED"
)

var AllBugState = []BugState{
	BugStateNew,
	BugStateInwork,
	BugStateDone,
	BugStateRejected,
}

func (e BugState) IsValid() bool {
	switch e {
	case BugStateNew, BugStateInwork, BugStateDone, BugStateRejected:
		return true
	}
	return false
}

func (e BugState) String() string {
	return string(e)
}

func (e *BugState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BugState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BugState", str)
	}
	return nil
}

func (e BugState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *BugState) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e BugState) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type CommentState string

const (
	CommentStateComment    CommentState = "COMMENT"
	CommentStateWorkaround CommentState = "WORKAROUND"
	CommentStateResult     CommentState = "RESULT"
)

var AllCommentState = []CommentState{
	CommentStateComment,
	CommentStateWorkaround,
	CommentStateResult,
}

func (e CommentState) IsValid() bool {
	switch e {
	case CommentStateComment, CommentStateWorkaround, CommentStateResult:
		return true
	}
	return false
}

func (e CommentState) String() string {
	return string(e)
}

func (e *CommentState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CommentState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CommentState", str)
	}
	return nil
}

func (e CommentState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CommentState) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CommentState) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type OrderBy string

const (
	OrderByID   OrderBy = "ID"
	OrderByName OrderBy = "NAME"
)

var AllOrderBy = []OrderBy{
	OrderByID,
	OrderByName,
}

func (e OrderBy) IsValid() bool {
	switch e {
	case OrderByID, OrderByName:
		return true
	}
	return false
}

func (e OrderBy) String() string {
	return string(e)
}

func (e *OrderBy) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderBy", str)
	}
	return nil
}

func (e OrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *OrderBy) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e OrderBy) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type VoteState string

const (
	VoteStateLike    VoteState = "LIKE"
	VoteStateDislike VoteState = "DISLIKE"
)

var AllVoteState = []VoteState{
	VoteStateLike,
	VoteStateDislike,
}

func (e VoteState) IsValid() bool {
	switch e {
	case VoteStateLike, VoteStateDislike:
		return true
	}
	return false
}

func (e VoteState) String() string {
	return string(e)
}

func (e *VoteState) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VoteState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VoteState", str)
	}
	return nil
}

func (e VoteState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *VoteState) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e VoteState) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
