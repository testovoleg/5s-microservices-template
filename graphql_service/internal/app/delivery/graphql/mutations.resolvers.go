package graph_resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"

	"github.com/testovoleg/5s-microservice-template/graphql_service/internal/app/mutations"
	"github.com/testovoleg/5s-microservice-template/graphql_service/internal/graph_model"
	graph "github.com/testovoleg/5s-microservice-template/graphql_service/schema"
	"github.com/testovoleg/5s-microservice-template/pkg/constants"
	"github.com/testovoleg/5s-microservice-template/pkg/tracing"
)

// CreateBug is the resolver for the createBug field.
func (r *mutationResolver) CreateBug(ctx context.Context, input model.NewBug) (*model.BugResponse, error) {
	r.metrics.CreateBugGraphQLQueries.Inc()

	ctx, span := tracing.StartGrpcServerTracerSpan(ctx, "mutationResolver.CreateBug")
	defer span.End()

	token := ctx.Value(constants.ContextKeyToken).(string)

	response, err := r.bs.Mutations.CreateBug.Handle(ctx, mutations.NewCreateBugCommand(token, &input))
	if err != nil {
		r.log.WarnMsg("mutationResolver.CreateBug", err)
		r.metrics.ErrorHttpRequests.Inc()
		return &model.BugResponse{
			Code:    400,
			Success: false,
			Message: err.Error(),
			Bug:     nil,
		}, nil
	}

	r.metrics.SuccessHttpRequests.Inc()
	return &model.BugResponse{
		Code:    200,
		Success: true,
		Message: "",
		Bug:     response,
	}, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
